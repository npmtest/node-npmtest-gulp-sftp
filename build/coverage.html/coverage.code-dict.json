{"/home/travis/build/npmtest/node-npmtest-gulp-sftp/test.js":"/* istanbul instrument in package npmtest_gulp_sftp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-sftp/lib.npmtest_gulp_sftp.js":"/* istanbul instrument in package npmtest_gulp_sftp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_sftp = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_sftp = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-sftp/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-sftp && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_sftp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_sftp\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_sftp.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_sftp.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_sftp.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_sftp.__dirname +\n                    '/lib.npmtest_gulp_sftp.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-sftp/gulp-sftp/index.js":"'use strict';\nvar path = require('path');\nvar fs = require('fs');\nvar gutil = require('gulp-util');\nvar util = require('util');\nvar through = require('through2');\nvar Connection = require('ssh2');\nvar async = require('async');\nvar parents = require('parents');\nvar Stream = require('stream');\nvar assign = require('object-assign');\n\nvar normalizePath = function(path){\n    return path.replace(/\\\\/g, '/');\n};\n\nmodule.exports = function (options) {\n    options = assign({}, options);// credit sindresorhus\n\n\n    if (options.host === undefined) {\n        throw new gutil.PluginError('gulp-sftp', '`host` required.');\n    }\n\n    var fileCount = 0;\n    var remotePath = options.remotePath || '/';\n    var remotePlatform = options.remotePlatform || options.platform || 'unix';\n\n    options.authKey = options.authKey||options.auth;\n    var authFilePath = options.authFile || '.ftppass';\n    var authFile=path.join('./',authFilePath);\n    if(options.authKey && fs.existsSync(authFile)){\n        var auth = JSON.parse(fs.readFileSync(authFile,'utf8'))[options.authKey];\n        if(!auth)\n            this.emit('error', new gutil.PluginError('gulp-sftp', 'Could not find authkey in .ftppass'));\n        if(typeof auth == \"string\" && auth.indexOf(\":\")!=-1){\n            var authparts = auth.split(\":\");\n            auth = {user:authparts[0],pass:authparts[1]};\n        }\n        for (var attr in auth) { options[attr] = auth[attr]; }\n    }\n\n    //option aliases\n    options.password = options.password||options.pass;\n    options.username = options.username||options.user||'anonymous';\n\n    /*\n     * Lots of ways to present key info\n     */\n    var key = options.key || options.keyLocation || null;\n    if(key&&typeof key == \"string\")\n        key = {location:key};\n\n    //check for other options that imply a key or if there is no password\n    if(!key && (options.passphrase||options.keyContents||!options.password)){\n        key = {};\n    }\n\n    if(key){\n\n        //aliases\n        key.contents=key.contents||options.keyContents;\n        key.passphrase=key.passphrase||options.passphrase;\n\n        //defaults\n        key.location=key.location||[\"~/.ssh/id_rsa\",\"/.ssh/id_rsa\",\"~/.ssh/id_dsa\",\"/.ssh/id_dsa\"];\n\n        //type normalization\n        if(!util.isArray(key.location))\n            key.location=[key.location];\n\n        //resolve all home paths\n        if(key.location){\n            var home = process.env.HOME||process.env.USERPROFILE;\n            for(var i=0;i<key.location.length;i++)\n                if (key.location[i].substr(0,2) === '~/')\n                    key.location[i] = path.resolve(home,key.location[i].replace(/^~\\//,\"\"));\n\n\n            for(var i=0,keyPath;keyPath=key.location[i++];){\n\n\n                if(fs.existsSync(keyPath)){\n                    key.contents = fs.readFileSync(keyPath);\n                    break;\n                }\n            }\n        }else if(!key.contents){\n            this.emit('error', new gutil.PluginError('gulp-sftp', 'Cannot find RSA key, searched: '+key.location.join(', ')));\n        }\n\n\n\n    }\n    /*\n     * End Key normalization, key should now be of form:\n     * {location:Array,passphrase:String,contents:String}\n     * or null\n     */\n\n\n\n\n    var logFiles = options.logFiles === false ? false : true;\n\n\n    delete options.remotePath;\n    delete options.localPath;\n    delete options.user;\n    delete options.pass;\n    delete options.logFiles;\n\n    var mkDirCache = {};\n\n    var finished=false;\n    var sftpCache = null;//sftp connection cache\n    var connectionCache = null;//ssh connection cache\n\n    var pool = function(remotePath, uploader){ // method to get cache or create connection\n\n\n        if(sftpCache)\n            return uploader(sftpCache);\n\n        if(options.password){\n            gutil.log('Authenticating with password.');\n        }else if(key){\n            gutil.log('Authenticating with private key.');\n        }\n\n        var c = new Connection();\n        connectionCache = c;\n        c.on('ready', function() {\n\n            c.sftp(function(err, sftp) {\n                if (err)\n                    throw err;\n\n                sftp.on('end', function() {\n                    gutil.log('SFTP :: SFTP session closed');\n                    sftpCache=null;\n                    if(!finished)\n                        this.emit('error', new gutil.PluginError('gulp-sftp', \"SFTP abrupt closure\"));\n                });\n\n                sftpCache = sftp;\n                uploader(sftpCache);\n            });//c.sftp\n        });//c.on('ready')\n\n        var self = this;\n        c.on('error', function(err) {\n            self.emit('error', new gutil.PluginError('gulp-sftp', err));\n            //return cb(err);\n        });\n        c.on('end', function() {\n            gutil.log('Connection :: end');\n        });\n        c.on('close', function(had_error) {\n            if(!finished){\n                gutil.log('gulp-sftp', \"SFTP abrupt closure\");\n                self.emit('error', new gutil.PluginError('gulp-sftp', \"SFTP abrupt closure\"));\n            }\n            gutil.log('Connection :: close',had_error!==false?\"with error\":\"\");\n            if(options.callback) options.callback();\n        });\n\n\n        /*\n         * connection options, may be a key\n         */\n        var connection_options = {\n            host : options.host,\n            port : options.port||22,\n            username : options.username\n        };\n\n        if(options.password){\n            connection_options.password = options.password;\n        }else if(options.agent) {\n            connection_options.agent = options.agent;\n            connection_options.agentForward = options.agentForward || false;\n        }else if(key){\n            connection_options.privateKey = key.contents;\n            connection_options.passphrase = key.passphrase;\n        }\n\n        if(options.timeout){\n            connection_options.readyTimeout = options.timeout;\n        }\n\n        c.connect(connection_options);\n\n        /*\n         * end connection options\n         */\n\n    };\n\n    return through.obj(function (file, enc, cb) {\n        if (file.isNull()) {\n            this.push(file);\n            return cb();\n        }\n\n        // have to create a new connection for each file otherwise they conflict, pulled from sindresorhus\n        var finalRemotePath = normalizePath(path.join(remotePath, file.relative));\n\n        //connection pulled from pool\n        pool.call(this, finalRemotePath, function(sftp){\n            /*\n             *  Create Directories\n             */\n\n            //get dir name from file path\n            var dirname=path.dirname(finalRemotePath);\n            //get parents of the target dir\n\n            var fileDirs = parents(dirname)\n                .map(function(d){return d.replace(/^\\/~/,\"~\");})\n                .map(normalizePath);\n\n            if(dirname.search(/^\\//) === 0){\n                fileDirs = fileDirs.map(function(dir){\n                    if(dir.search(/^\\//) === 0){\n                        return dir;\n                    }\n                    return '/' + dir;\n                });\n            }\n\n            //get filter out dirs that are closer to root than the base remote path\n            //also filter out any dirs made during this gulp session\n            fileDirs = fileDirs.filter(function(d){return d.length>=remotePath.length&&!mkDirCache[d];});\n\n            //while there are dirs to create, create them\n            //https://github.com/caolan/async#whilst - not the most commonly used async control flow\n            async.whilst(function(){\n                return fileDirs && fileDirs.length;\n            },function(next){\n                var d= fileDirs.pop();\n                mkDirCache[d]=true;\n                //mdrake - TODO: use a default file permission instead of defaulting to 755\n                if(remotePlatform && remotePlatform.toLowerCase().indexOf('win')!==-1) {\n                    d = d.replace('/','\\\\');\n                }\n                sftp.mkdir(d, {mode: '0755'}, function(err){//REMOTE PATH\n\n                    if(err){\n                        //assuming that the directory exists here, silencing this error\n                        gutil.log('SFTP error or directory exists:', gutil.colors.red(err + \" \" +d));\n                    }else{\n                        gutil.log('SFTP Created:', gutil.colors.green(d));\n                    }\n                    next();\n                });\n            },function(){\n\n                var stream = sftp.createWriteStream(finalRemotePath,{//REMOTE PATH\n                    flags: 'w',\n                    encoding: null,\n                    mode: '0666',\n                    autoClose: true\n                });\n\n                //var readStream = fs.createReadStream(fileBase+localRelativePath);\n\n                var uploadedBytes = 0;\n\n\n                var highWaterMark = stream.highWaterMark||(16*1000);\n                var size = file.stat.size;\n\n\n                file.pipe(stream); // start upload\n\n                stream.on('drain',function(){\n                    uploadedBytes+=highWaterMark;\n                    var p = Math.round((uploadedBytes/size)*100);\n                    p = Math.min(100,p);\n                    gutil.log('gulp-sftp:',finalRemotePath,\"uploaded\",(uploadedBytes/1000)+\"kb\");\n                });\n\n\n\n\n                stream.on('close', function(err) {\n\n                    if(err)\n                        this.emit('error', new gutil.PluginError('gulp-sftp', err));\n                    else{\n                        if (logFiles) {\n                            gutil.log('gulp-sftp:', gutil.colors.green('Uploaded: ') +\n                                file.relative +\n                                gutil.colors.green(' => ') +\n                                finalRemotePath);\n                        }\n\n                        fileCount++;\n                    }\n                    return cb(err);\n                });\n\n            });//async.whilst\n        });\n\n\n\n        this.push(file);\n\n    }, function (cb) {\n        if (fileCount > 0) {\n            gutil.log('gulp-sftp:', gutil.colors.green(fileCount, fileCount === 1 ? 'file' : 'files', 'uploaded successfully'));\n        } else {\n            gutil.log('gulp-sftp:', gutil.colors.yellow('No files uploaded'));\n        }\n        finished=true;\n        if(sftpCache)\n            sftpCache.end();\n        if(connectionCache)\n            connectionCache.end();\n\n        cb();\n    });\n};\n"}